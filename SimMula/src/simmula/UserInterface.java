/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package simmula;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.util.ArrayList;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.math3.distribution.ExponentialDistribution;
import org.apache.commons.math3.distribution.GammaDistribution;

/**
 *
 * @author Vinicius
 */
public class UserInterface extends javax.swing.JFrame {

    /**
     * Creates new form UserInterface
     */
    
    private SimMula simulator;
    private int selected_table;
    
    public UserInterface() {
        initComponents();
        hideButtons();
        centralize_screen();
        //UniformRealDistribution unif = new UniformRealDistribution();
        ExponentialDistribution ExpDist;
        GammaDistribution GamDist;
        double teste = 0;
        double sample;
        
        ExpDist = new ExponentialDistribution(29.47, 0.03393);        
        for (int i = 0; i < 1000; i++){
            sample = ExpDist.sample();
            teste = teste + sample;
        } System.out.println("Chegadas: (29,47) " + teste / 1000);
        
        GamDist = new GammaDistribution(0.86555, 67.341);        
        teste = 0;
        for (int i = 0; i < 1000; i++){
            sample = GamDist.sample();
            teste = teste + sample;
        } System.out.println("Produto 3 Experiente: (58,28) " + teste / 1000);
        
        ExpDist = new ExponentialDistribution(63.87, 0.01566);   
        teste = 0;
        for (int i = 0; i < 1000; i++){
            sample = ExpDist.sample();
            teste = teste + sample;
        } System.out.println("Produto 3 Inexperiente: (63,87) " + teste / 1000);
        
        GamDist = new GammaDistribution(0.60417, 152.35);        
        teste = 0;
        for (int i = 0; i < 1000; i++){
            sample = GamDist.sample();
            teste = teste + sample;
        } System.out.println("Produto 6 Experiente: (92,05) " + teste / 1000);
        
        GamDist = new GammaDistribution(0.83852, 131.14);        
        teste = 0;
        for (int i = 0; i < 1000; i++){
            sample = GamDist.sample();
            teste = teste + sample;
        } System.out.println("Produto 6 Inexperiente: (109,96) " + teste / 1000);
        
        GamDist = new GammaDistribution(0.12016, 265,02);        
        teste = 0;
        for (int i = 0; i < 1000; i++){
            sample = GamDist.sample();
            teste = teste + sample;
        } System.out.println("Produto 7 Experiente: (31,84) " + teste / 1000);
        
        ExpDist = new ExponentialDistribution(46.14, 0.02167);   
        teste = 0;
        for (int i = 0; i < 1000; i++){
            sample = ExpDist.sample();
            teste = teste + sample;
        } System.out.println("Produto 7 Inexperiente: (46,14) " + teste / 1000);
        
        ExpDist = new ExponentialDistribution(65.15, 0.01535);   
        teste = 0;
        for (int i = 0; i < 1000; i++){
            sample = ExpDist.sample();
            teste = teste + sample;
        } System.out.println("Produto 8 Experiente: (65.15) " + teste / 1000);
        
        GamDist = new GammaDistribution(1.5571, 138.44);        
        teste = 0;
        for (int i = 0; i < 1000; i++){
            sample = GamDist.sample();
            teste = teste + sample;
        } System.out.println("Produto 8 Inexperiente: (215,56) " + teste / 1000);
        
        GamDist = new GammaDistribution(0.57384, 156.7);        
        teste = 0;
        for (int i = 0; i < 1000; i++){
            sample = GamDist.sample();
            teste = teste + sample;
        } System.out.println("Produto 9 Experiente: (89,92) " + teste / 1000);
        
        GamDist = new GammaDistribution(0.67251, 153);        
        teste = 0;
        for (int i = 0; i < 1000; i++){
            sample = GamDist.sample();
            teste = teste + sample;
        } System.out.println("Produto 8 Inexperiente: (102,89) " + teste / 1000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcbArrivalFunction = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jtfArrivalParameter1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfArrivalParameter2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtfArrivalParameter3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jtfTimeToEnd = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jtfTotalTeams = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jtfTotalProducts = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jtfSLAProbability = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jtfQueue = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jtfTotalSimu = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTeams = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtServiceFunctions = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtProductsArrivalDistribuction = new javax.swing.JTable();
        jbExecuteSimulation = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jbADD = new javax.swing.JButton();
        jbDEL = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SimMula");

        jLabel1.setText("Arrival Function:");

        jcbArrivalFunction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Exponencial" }));

        jLabel2.setText("P1:");

        jtfArrivalParameter1.setText("29.47");

        jLabel3.setText("P2:");

        jtfArrivalParameter2.setText("0.03393");

        jLabel4.setText("P3:");

        jLabel5.setText("Final Time:");

        jtfTimeToEnd.setText("570");

        jLabel6.setText("Total Teams:");

        jtfTotalTeams.setText("1");

        jLabel7.setText("Total Products:");

        jtfTotalProducts.setText("5");

        jLabel8.setText("SLA Probability:");

        jtfSLAProbability.setText("0.2921");

        jLabel9.setText("Initial Queue:");

        jtfQueue.setText("0");
        jtfQueue.setToolTipText("");

        jLabel10.setText("Total Simulations:");

        jtfTotalSimu.setText("100");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jcbArrivalFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfArrivalParameter1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfArrivalParameter2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfArrivalParameter3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtfTotalTeams, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtfTotalProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtfTimeToEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfTotalSimu, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfQueue, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtfSLAProbability, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(305, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbArrivalFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jtfArrivalParameter1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jtfArrivalParameter2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jtfArrivalParameter3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfTimeToEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtfTotalTeams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtfTotalProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfSLAProbability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jtfQueue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jtfTotalSimu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Parameters", jPanel3);

        jtTeams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(0),  new Integer(0),  new Integer(2)},
                { new Integer(0),  new Integer(1),  new Integer(1)}
            },
            new String [] {
                "ID", "Server Type", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtTeams.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtTeamsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtTeamsFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(jtTeams);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Teams", jPanel1);

        jtServiceFunctions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(0),  new Integer(0),  new Integer(0), "Gamma",  new Float(0.86555),  new Float(67.341),  new Float(0.0)},
                { new Integer(0),  new Integer(0),  new Integer(1), "Exponencial",  new Float(63.87),  new Float(0.01566),  new Float(0.0)},
                { new Integer(1),  new Integer(0),  new Integer(0), "Gamma",  new Float(0.60417),  new Float(152.35),  new Float(0.0)},
                { new Integer(1),  new Integer(0),  new Integer(1), "Gamma",  new Float(0.83852),  new Float(131.14),  new Float(0.0)},
                { new Integer(2),  new Integer(0),  new Integer(0), "Gamma",  new Float(0.12016),  new Float(265.02),  new Float(0.0)},
                { new Integer(2),  new Integer(0),  new Integer(1), "Exponencial",  new Float(46.14),  new Float(0.02167),  new Float(0.0)},
                { new Integer(3),  new Integer(0),  new Integer(0), "Exponencial",  new Float(65.15),  new Float(0.01535),  new Float(0.0)},
                { new Integer(3),  new Integer(0),  new Integer(1), "Gamma",  new Float(1.5571),  new Float(138.44),  new Float(0.0)},
                { new Integer(4),  new Integer(0),  new Integer(0), "Gamma",  new Float(0.57384),  new Float(156.7),  new Float(0.0)},
                { new Integer(4),  new Integer(0),  new Integer(1), "Gamma",  new Float(0.67251),  new Float(153.0),  new Float(0.0)}
            },
            new String [] {
                "Product", "Team", "Server Type", "Distribution Function", "P1", "P2", "P3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtServiceFunctions.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtServiceFunctionsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtServiceFunctionsFocusLost(evt);
            }
        });
        jScrollPane5.setViewportView(jtServiceFunctions);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Service", jPanel6);

        jtProductsArrivalDistribuction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Byte((byte) 0),  new Float(0.8643)},
                { new Byte((byte) 1),  new Float(0.0498)},
                { new Byte((byte) 2),  new Float(0.0653)},
                { new Byte((byte) 3),  new Float(0.0172)},
                { new Byte((byte) 4),  new Float(0.0034)}
            },
            new String [] {
                "ID", "Probability"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Byte.class, java.lang.Float.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jtProductsArrivalDistribuction.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtProductsArrivalDistribuctionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtProductsArrivalDistribuctionFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(jtProductsArrivalDistribuction);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Services Rates", jPanel2);

        jbExecuteSimulation.setText("Start");
        jbExecuteSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExecuteSimulationActionPerformed(evt);
            }
        });

        jButton1.setText("Stop");
        jButton1.setMaximumSize(new java.awt.Dimension(71, 23));
        jButton1.setMinimumSize(new java.awt.Dimension(71, 23));
        jButton1.setPreferredSize(new java.awt.Dimension(71, 23));

        jbADD.setText("ADD");
        jbADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbADDActionPerformed(evt);
            }
        });

        jbDEL.setText("DEL");
        jbDEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDELActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbADD, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbDEL, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbExecuteSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbDEL)
                    .addComponent(jbADD)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbExecuteSimulation))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbExecuteSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExecuteSimulationActionPerformed
        int total_servers = 0;
        for (int i = 0; i < jtTeams.getRowCount(); i++){
            total_servers += (int) jtTeams.getValueAt(i, 2);
        }
        Result result = new Result(total_servers);
        Report report;
        for (int sim = 0; sim < Integer.parseInt(jtfTotalSimu.getText()); sim++){    
            simulator = new SimMula();
            int count_linhas; //auxiliar
            //ao clicar em executar vamos montar os arrays com os parâmetros
            //vamos configurar a função de chegada
            switch(jcbArrivalFunction.getSelectedItem().toString()){                //conforme a função que vamos utilizar a quantidade de parâmetros muda
                case "Exponencial":
                    float[] arrival_parameters = new float[2];
                    arrival_parameters[0] = Float.parseFloat(jtfArrivalParameter1.getText());
                    arrival_parameters[1] = Float.parseFloat(jtfArrivalParameter2.getText());
                    simulator.configArrival(jcbArrivalFunction.getSelectedItem().toString(), arrival_parameters);
                    break;
            }
            //vamos configurar as funções de tempos de serviços e os produtos. Aqui vamos precisar montar 3 estruturas: array com os nomes das funções, matriz com os parametros da função e matriz relacionando o produto com o servidor
            count_linhas = jtServiceFunctions.getRowCount();
            int[] products = new int[Integer.parseInt(jtfTotalProducts.getText())]; //array que conterá os produtos. Cada registro é um produto e o conteúdo do registro corresponde a equipe que atende esse produto.
            String[] functions_name = new String[count_linhas];                     //array que vai conter os nomes das funções em cada posição
            float[][] departure_parameters = new float[count_linhas][3];            //matriz que vai conter os parâmetros das funções do array anterior. cada linha corresponde ao mesmo registro do array anterior
            int[][] products_and_servertype = new int[count_linhas][2];             //matriz que vai relacionar a função com o tipo de produto e o tipo de servidor que a função corresponde. Cada linha da matriz corresponde à função da mesma posição no array de funções
            for (int i = 0; i < count_linhas; i++){                                 //pra cada linha da tabela de funções
                functions_name[i] = jtServiceFunctions.getValueAt(i, 3).toString();         //adicionamos o nome da função
                departure_parameters[i][0] = (float) jtServiceFunctions.getValueAt(i, 4);   //adicionamos os parametros da função
                departure_parameters[i][1] = (float) jtServiceFunctions.getValueAt(i, 5);   //...
                departure_parameters[i][2] = (float) jtServiceFunctions.getValueAt(i, 6);   //...
                products_and_servertype[i][0] = (int) jtServiceFunctions.getValueAt(i, 0); //relacionamos o tipo de produto com tipo de servidor que essa função corresponde
                products_and_servertype[i][1] = (int) jtServiceFunctions.getValueAt(i, 2); //...
                products[(int) jtServiceFunctions.getValueAt(i, 0)] = (int) jtServiceFunctions.getValueAt(i, 1);    //preenchemos o array de produtos com a equipe que atende aquele produto
                //System.out.println(this.jtServiceFunctions.getValueAt(i, 3));
            }
            simulator.configDeparture(functions_name, departure_parameters, products_and_servertype);
            simulator.configProducts(products);
            //vamos configurar as taxas de chegada de cada tipo de cliente
            count_linhas = jtProductsArrivalDistribuction.getRowCount();
            float[] product_arrival_rate = new float[count_linhas];                                 //cada posição se refere ao ID do produto e o conteúdo do array naquela posição corresponde a probabilidade acumulada de ocorrência do serviço
            product_arrival_rate[0] = (float) jtProductsArrivalDistribuction.getValueAt(0, 1);      //primeira posição podemos preencher diretamente pois o valor acumulado é o valor do próprio produto
            for (int i = 1; i < count_linhas; i++){                                                 //para cada produto
                product_arrival_rate[i] = (float) jtProductsArrivalDistribuction.getValueAt(i, 1) 
                                            + product_arrival_rate[i-1];                            //preenche o valor acumulado do produto somando sua probabilidade às somas anteriores
            }
            simulator.configServiceType(product_arrival_rate);
            //vamos configurar as equipes e também os produtos
            count_linhas = jtTeams.getRowCount();
            int[] teams_size = new int[Integer.parseInt(jtfTotalTeams.getText())];  //array que conterá as equipes
            int count_servers = 0;
            int[] servers;
            for (int i = 0; i < teams_size.length; i++){                        //vamos zerar o vetor que define o tamanho da equipe
                teams_size[i] = 0;
            }
            for (int i = 0; i < count_linhas; i++){                             //vamos obter o total de servidores
                count_servers = count_servers + (int) jtTeams.getValueAt(i, 2); //em cada linha vamos pegar o total de servidores
                teams_size[(int) jtTeams.getValueAt(i, 0)] =                    //vamos incrementar a quantidade de servidores da equipe correspondente ao ID desta linha
                        (int) jtTeams.getValueAt(i, 2) +
                        teams_size[(int) jtTeams.getValueAt(i, 0)];
            }
            servers = new int[count_servers];                                   //criamos o array que receberá o servidor e sua experiência
            count_servers = 0;                                                  //vamos usar esta variável para ser o nosso index dentro do array de servidores
            for (int i = 0; i < count_linhas; i++){                             //em cada linha
                for (int j = 0; j < (int) jtTeams.getValueAt(i, 2); j++){       //para cada n servidores de determinada equipe e tipo
                    servers[count_servers] = 
                            (int) jtTeams.getValueAt(i, 0) * 10 +               //equipe
                            (int) jtTeams.getValueAt(i, 1);                     //tipo de servidor
                    count_servers++;
                }
            }
            simulator.configInitQueue(Integer.parseInt(jtfQueue.getText()));
            simulator.configTeams(Integer.parseInt(jtfTotalTeams.getText()), teams_size, servers);
            simulator.setSLAP(Float.parseFloat(jtfSLAProbability.getText()));
            simulator.setTimeToEnd(Float.parseFloat(jtfTimeToEnd.getText()));
            simulator.run();
            report = simulator.getReport();
            result.setAttendRatio(report.getAttendRatio());
            result.setAvgQueueTimeSLA(report.getAvgQueueTimeSLA());
            result.setAvgServiceTime(report.getAvgServiceTime());
            result.setAvgSystemTime(report.getAvgSystemTime());
            result.setCountAttendTime20(report.getCountAttendTime20());
            result.setCountClients1HourQueue(report.getCountClients1HourQueue());
            result.setCountClientsNextDayAttend(report.getCountClientsNextDayAttend());
            result.setCountSLAQueueTime30(report.getCountSLAQueueTime30());
            result.setPctAttendTime20(report.getPctAttendTime20());
            result.setPctClients1HourQueue(report.getPctClients1HourQueue());
            result.setPctClientsNextDayAttend(report.getPctClientsNextDayAttend());
            result.setPctSLAQueueTime30(report.getPctSLAQueueTime30());
            result.setServerBusyTime(report.getServerBusyTime());
            result.setTotalClients(report.getTotalClients());
            result.setTotalClientsIn(report.getTotalClientsIn());
            result.setTotalClientsOut(report.getTotalClientsOut());
            result.setTotalClientsQueue(report.getTotalClientsQueue());
            result.setAvgQueueTime(report.getAvgQueueTime());
            result.setCountSLA(report.getCountSLA());
            result.setPctSLA(report.getPctSLA());
        }
        result.update(Integer.parseInt(jtfTotalSimu.getText()));
        result.report();
    }//GEN-LAST:event_jbExecuteSimulationActionPerformed

    private void jtTeamsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtTeamsFocusGained
        showButtons(1);
    }//GEN-LAST:event_jtTeamsFocusGained

    private void jtTeamsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtTeamsFocusLost
        hideButtons();
    }//GEN-LAST:event_jtTeamsFocusLost

    private void jtServiceFunctionsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtServiceFunctionsFocusGained
        showButtons(2);
        updateComboTeams();
    }//GEN-LAST:event_jtServiceFunctionsFocusGained

    private void jtProductsArrivalDistribuctionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtProductsArrivalDistribuctionFocusGained
        showButtons(3);
    }//GEN-LAST:event_jtProductsArrivalDistribuctionFocusGained

    private void jtProductsArrivalDistribuctionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtProductsArrivalDistribuctionFocusLost
        hideButtons();
    }//GEN-LAST:event_jtProductsArrivalDistribuctionFocusLost

    private void jtServiceFunctionsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtServiceFunctionsFocusLost
        hideButtons();
    }//GEN-LAST:event_jtServiceFunctionsFocusLost

    private void jbADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbADDActionPerformed
        DefaultTableModel model;
        switch (selected_table){
            case 1:
                model = (DefaultTableModel) jtTeams.getModel();
                model.addRow(new Object[]{""});
                break;
            case 2:
                model = (DefaultTableModel) jtServiceFunctions.getModel();
                model.addRow(new Object[]{""});
                break;
            case 3:
                model = (DefaultTableModel) jtProductsArrivalDistribuction.getModel();
                model.addRow(new Object[]{""});
                break;
            default:
                JOptionPane.showMessageDialog(null, "Select the table.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbADDActionPerformed

    private void jbDELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDELActionPerformed
        DefaultTableModel model;
        switch (selected_table){
            case 1:
                if (jtTeams.getSelectedRow() >= 0){
                    model = (DefaultTableModel) jtTeams.getModel();
                    model.removeRow(jtTeams.getSelectedRow());
                }
                break;
            case 2:
                if (jtServiceFunctions.getSelectedRow() >= 0){
                    model = (DefaultTableModel) jtServiceFunctions.getModel();
                    model.removeRow(jtServiceFunctions.getSelectedRow());
                }
                break;
            case 3:
                if (jtProductsArrivalDistribuction.getSelectedRow() >= 0){
                    model = (DefaultTableModel) jtProductsArrivalDistribuction.getModel();
                    model.removeRow(jtProductsArrivalDistribuction.getSelectedRow());
                }
                break;
            default:
                JOptionPane.showMessageDialog(null, "Select the table.", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbDELActionPerformed

    //método para esconder botões de adicionar e remover registros das tabelas
    private void hideButtons(){
        jbADD.setVisible(false);
        jbDEL.setVisible(false);
        selected_table = 0;
    }
    
    //método para mostrar botões de adicionar e remover registros das tabelas
    private void showButtons(int tabela){
        jbADD.setVisible(true);
        jbDEL.setVisible(true);
        selected_table = tabela;
    }
    
    //método para centralizar tela principal
    private void centralize_screen() {
        // Centraliza a janela de abertura no centro do desktop.  
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();  
        Rectangle r      = this.getBounds();  
        // Dimensões da janela  
        int widthSplash = r.width ;  
        int heightSplash = r.height;  
        // calculo para encontrar as cooredenadas X e Y para a centralização da janela.  
        int posX = (screen.width / 2) - ( widthSplash / 2 );  
        int posY = (screen.height / 2) - ( heightSplash / 2 );  
        this.setBounds(posX,posY,widthSplash,heightSplash);
    }
    
    //método para preencher o ComboBox para dar opções de escolha do servidor
    private void updateComboTeams(){
        ArrayList<Integer> teamsid;
        teamsid = new ArrayList<>();
        int count_linhas = jtTeams.getRowCount();
        teamsid.add(0, (int) jtTeams.getValueAt(0, 0));
        for (int i = 1; i < count_linhas; i++){
            if ((int) jtTeams.getValueAt(i, 0) != teamsid.get(0)){
                teamsid.add(0, (int) jtTeams.getValueAt(i, 0));
            }
        }
        String[] values = new String[teamsid.size()+1];
        for (int i = teamsid.size(); i > 0; i--){
            values[i] = Integer.toString(teamsid.get(i - 1));
        }
        values[0] = Integer.toString(((int) teamsid.get(0)) + 1); //última posição é o ID da última equipe + 1
        jtServiceFunctions.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(new JComboBox(values)));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            //for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                //if ("Nimbus".equals(info.getName())) {
                 //   javax.swing.UIManager.setLookAndFeel(info.getClassName());
                //    break;
                //}
            //}
            javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbADD;
    private javax.swing.JButton jbDEL;
    private javax.swing.JButton jbExecuteSimulation;
    private javax.swing.JComboBox jcbArrivalFunction;
    private javax.swing.JTable jtProductsArrivalDistribuction;
    private javax.swing.JTable jtServiceFunctions;
    private javax.swing.JTable jtTeams;
    private javax.swing.JTextField jtfArrivalParameter1;
    private javax.swing.JTextField jtfArrivalParameter2;
    private javax.swing.JTextField jtfArrivalParameter3;
    private javax.swing.JTextField jtfQueue;
    private javax.swing.JTextField jtfSLAProbability;
    private javax.swing.JTextField jtfTimeToEnd;
    private javax.swing.JTextField jtfTotalProducts;
    private javax.swing.JTextField jtfTotalSimu;
    private javax.swing.JTextField jtfTotalTeams;
    // End of variables declaration//GEN-END:variables
}
